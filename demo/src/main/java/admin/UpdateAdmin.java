/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;

import databaseConnectivity.ConnectionClass;
import models.UserModel;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author hi
 */
public class UpdateAdmin extends javax.swing.JFrame {
 UserModel userModel;
    /**
     * Creates new form UpdateAdmin
     */
    public UpdateAdmin() {
        initComponents();
    }
    public UpdateAdmin(UserModel userModel) {
        initComponents();
        this.userModel = userModel;
        this.emailTF.setText(userModel.getEmail());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        updateAdminLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        passwordTF = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        emailTF = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(533, 325));
        getContentPane().setLayout(null);

        updateAdminLabel.setText("UPDATE ADMIN");
        getContentPane().add(updateAdminLabel);
        updateAdminLabel.setBounds(210, 30, 110, 30);

        emailLabel.setText("email");
        getContentPane().add(emailLabel);
        emailLabel.setBounds(70, 90, 80, 30);

        passwordLabel.setText("password");
        getContentPane().add(passwordLabel);
        passwordLabel.setBounds(70, 160, 60, 30);
        getContentPane().add(passwordTF);
        passwordTF.setBounds(160, 160, 200, 40);

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(updateButton);
        updateButton.setBounds(60, 240, 120, 40);
        getContentPane().add(emailTF);
        emailTF.setBounds(160, 100, 200, 40);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton);
        deleteButton.setBounds(250, 240, 130, 40);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
String email = emailTF.getText();
        String password = passwordTF.getText();
        if (email.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter email");
        } else if (password.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Enter password");
        } else {
            final String searchStatement = "SELECT * from users where email=? && id!=?";

            try {
                PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
                searchPreparedStatement.setString(1, email);
                searchPreparedStatement.setString(2, Integer.toString(userModel.getID()));

                ResultSet searhResultSet = searchPreparedStatement.executeQuery();

                while (searhResultSet.next()) {
                    JOptionPane.showMessageDialog(null, "Email already exists");
                    return;
                }
                final String insertStatement = "update users set `name`=?, `email`=?, `password`=?, `address`=?, `role`=? where `id`=?";
                PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
                preparedStatement.setString(1, "");
                preparedStatement.setString(2, email);
                preparedStatement.setString(3, password);
                preparedStatement.setString(4, "");
                preparedStatement.setInt(5, 1);
                preparedStatement.setString(6, Integer.toString(userModel.getID()));

                final int isAdded = preparedStatement.executeUpdate();

                if (isAdded > 0) {
                    JOptionPane.showMessageDialog(null, "Value Updated");
                    ViewUsers viewUsers = new ViewUsers();
                viewUsers.setVisible(true);
                    dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Error");
                }
            } catch (SQLException ex) {
                System.out.println("error in " + AddAdmin.class.getName() + " = " + ex);
            }
        }
            // TODO add your handling code here:
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
     final String statement = "delete from users where `id`=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setString(1, Integer.toString(userModel.getID()));
            int f=preparedStatement.executeUpdate();
            if(f>0) {
                JOptionPane.showMessageDialog(null, "Account Deleted");
                ViewUsers viewUsers = new ViewUsers();
                viewUsers.setVisible(true);
                dispose();
            }
            else
            {
                System.out.println("Account Not Deleted");
                JOptionPane.showMessageDialog(null, "Account Not Deleted");
            }
        } catch (SQLException ex) {
                System.out.println("error in " + AddAdmin.class.getName() + " = " + ex);
        }   // TODO add your handling code here:
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTF;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField passwordTF;
    private javax.swing.JLabel updateAdminLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
