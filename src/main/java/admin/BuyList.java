/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package admin;

import databaseConnectivity.ConnectionClass;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.BuyProductModel;
import models.CatagoryModel;
import models.ProductModel;

/**
 *
 * @author hi
 */
public class BuyList extends javax.swing.JFrame {
    ArrayList<BuyProductModel> buyProductArray = new ArrayList<BuyProductModel>();
    
    ArrayList<CatagoryModel> categoriesModel = new ArrayList<CatagoryModel>();
    
    ArrayList<ProductModel> productsArrayModel = new ArrayList<ProductModel>();
    
    CatagoryModel selectedCategoryModel = new CatagoryModel();
    ProductModel selectedProductModel = new ProductModel();
    /**
     * Creates new form BuyList
     */
    public BuyList() {
        initComponents();
        setCategories();
    }
    private void setCategories() {
        final String statement = "SELECT * from catagories";
        try {
            PreparedStatement preparedStatementCatagory = ConnectionClass.getInstance().connection.prepareStatement(statement);

            ResultSet resultSet = preparedStatementCatagory.executeQuery();
            categoriesComboBox.removeAllItems();
            while (resultSet.next()) {
                CatagoryModel cm = new CatagoryModel();
                
                cm.setID(resultSet.getInt("id"));
                cm.setName(resultSet.getString("catagoryname"));
                
                categoriesModel.add(cm);
                categoriesComboBox.addItem(cm.getName());
            }
        } catch (SQLException ex) {
            Logger.getLogger(ViewCatagory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void setProducts() {
        if (categoriesComboBox.getSelectedItem() instanceof String) {
        final String categoryName = categoriesComboBox.getSelectedItem().toString();
        
        final String statement = "SELECT * from Products where category_id=?";
        try {
            PreparedStatement preparedStatementProduct = ConnectionClass.getInstance().connection.prepareStatement(statement);
            for(CatagoryModel cm: categoriesModel) {
                if (cm.getName().equals(categoryName)) {
                    preparedStatementProduct.setInt(1, cm.getID());
                    selectedCategoryModel = cm;
                    break;
                }
            }

            ResultSet resultSet = preparedStatementProduct.executeQuery();
            productsComboBox.removeAllItems();
            productsArrayModel.clear();
            while (resultSet.next()) {
                ProductModel pm = new ProductModel();
                
                pm.setID(resultSet.getInt("id"));
                pm.setName(resultSet.getString("name"));
                pm.setPrice(resultSet.getString("price"));
                pm.setQuantity(resultSet.getString("quantity"));
                pm.setCategoryId(Integer.parseInt(resultSet.getString("category_id")));
                
                productsArrayModel.add(pm);
                productsComboBox.addItem(pm.getName());
            }
            
            if (productsArrayModel.isEmpty()) {
                    selectedProductModel = null;
                    stockTF.setText("");
                    priceTF.setText("0");
                    totalPriceTF1.setText("");
                    quantitySpinner.setValue(0);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ViewProduct.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }
    
    private void setData(ProductModel pm) {
        selectedProductModel = pm;
        stockTF.setText(pm.getQuantity());
        priceTF.setText(pm.getPrice());
        quantitySpinner.setValue(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        stockTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        buyButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        categoriesComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        priceTF = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        productsComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        totalPriceTF1 = new javax.swing.JTextField();
        quantitySpinner = new javax.swing.JSpinner();
        finalPriceTF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(675, 460));
        getContentPane().setLayout(null);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(0, 0, 75, 22);

        jLabel1.setText("In Stock");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 90, 50, 30);

        jLabel3.setText("Quantity:-");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 130, 60, 30);

        stockTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockTFActionPerformed(evt);
            }
        });
        getContentPane().add(stockTF);
        stockTF.setBounds(90, 90, 200, 30);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 180, 620, 200);

        jButton2.setText("Add  to  list");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(530, 100, 130, 30);

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });
        getContentPane().add(buyButton);
        buyButton.setBounds(290, 390, 75, 22);

        jLabel2.setText("Products:-");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(300, 50, 60, 20);

        categoriesComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoriesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoriesComboBoxItemStateChanged(evt);
            }
        });
        categoriesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoriesComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(categoriesComboBox);
        categoriesComboBox.setBounds(90, 50, 72, 22);

        jLabel4.setText("Total Price");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(300, 130, 40, 20);
        getContentPane().add(priceTF);
        priceTF.setBounds(370, 90, 140, 22);

        jLabel5.setText("Category:-");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(30, 50, 60, 20);

        productsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        productsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productsComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(productsComboBox);
        productsComboBox.setBounds(370, 50, 72, 22);

        jLabel6.setText("Price:-");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(300, 90, 40, 20);
        getContentPane().add(totalPriceTF1);
        totalPriceTF1.setBounds(370, 130, 140, 22);

        quantitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                quantitySpinnerStateChanged(evt);
            }
        });
        getContentPane().add(quantitySpinner);
        quantitySpinner.setBounds(90, 140, 64, 22);
        getContentPane().add(finalPriceTF);
        finalPriceTF.setBounds(180, 390, 64, 22);

        jLabel7.setText("Final Price:-");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(110, 390, 70, 16);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        EmployeeDash obj=new EmployeeDash();
        obj.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        try {
            for (BuyProductModel bpm: buyProductArray) {
                final String insertStatement = "update products set `quantity`=?  where `id`=?";
                PreparedStatement preparedStatementProduct = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
                int stock = Integer.parseInt(bpm.productModel.getQuantity());
                int newStock = stock - bpm.quantity;
                preparedStatementProduct.setInt(1, newStock);
                preparedStatementProduct.setInt(2, bpm.productModel.getID());

                final int isAdded = preparedStatementProduct.executeUpdate();
                
            }
                ReceiptScreen ob=new ReceiptScreen(buyProductArray, finalPriceTF.getText());
                ob.setVisible(true);
                dispose();

        } catch(Exception e) {
        
        }
    // TODO add your handling code here:
    }//GEN-LAST:event_buyButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        final String productName = productsComboBox.getSelectedItem().toString();
        
        if (selectedProductModel.getName().equals(productName)) {

            for(BuyProductModel bpa: buyProductArray) {
                if (selectedProductModel.getName().equals(bpa.productModel.getName())) {
                    JOptionPane.showMessageDialog(null, "Product already added");
                    return;
                }
            }

            final int quantityToBuy = Integer.parseInt(quantitySpinner.getValue().toString());
            final int quantityInStock = Integer.parseInt(selectedProductModel.getQuantity());
            if (quantityInStock < quantityToBuy) {
                JOptionPane.showMessageDialog(null, "Product Quantity is more than it is in stock");
                return;
            }

            ProductModel pmToAdd = new ProductModel();
            pmToAdd.setID(selectedProductModel.getID());
            pmToAdd.setName(selectedProductModel.getName());
            pmToAdd.setPrice(selectedProductModel.getPrice());
            pmToAdd.setQuantity(selectedProductModel.getQuantity());
            pmToAdd.setCategoryId(selectedProductModel.getCategoryID());

            CatagoryModel cmToAdd = new CatagoryModel();
            cmToAdd.setID(selectedCategoryModel.getID());
            cmToAdd.setName(selectedCategoryModel.getName());

            BuyProductModel bpa = new BuyProductModel();
            bpa.productModel = pmToAdd;
            bpa.categoryModel = cmToAdd;
            bpa.quantity = quantityToBuy;
            bpa.totalPrice = totalPriceTF1.getText();

            buyProductArray.add(bpa);
        }
        
        stockTF.setText("");
        priceTF.setText("0");
        totalPriceTF1.setText("");
        quantitySpinner.setValue(0);
        
        setTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void categoriesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoriesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoriesComboBoxActionPerformed

    private void stockTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stockTFActionPerformed

    private void productsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productsComboBoxActionPerformed
        if (productsComboBox.getSelectedItem() instanceof String) {
        final String productName = productsComboBox.getSelectedItem().toString();
        for(ProductModel pm: productsArrayModel) {
            if (pm.getName().equals(productName)) {
                setData(pm);
                break;
            }
        }
        }
    }//GEN-LAST:event_productsComboBoxActionPerformed

    private void categoriesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoriesComboBoxItemStateChanged
        setProducts();
    }//GEN-LAST:event_categoriesComboBoxItemStateChanged

    private void quantitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_quantitySpinnerStateChanged
        int quantity = Integer.parseInt(quantitySpinner.getValue().toString());
        int price = Integer.parseInt(priceTF.getText());
        totalPriceTF1.setText(price * quantity + "");
    }//GEN-LAST:event_quantitySpinnerStateChanged

    private void setTable() {
            final String[] headerName = {"Product Name","Category Name","Price", "Quantity","Total Price"};
            DefaultTableModel model = new DefaultTableModel(null, headerName);
            jTable1.setModel(model);
            Object[] row = new Object[5];
            
            int totalPrice = 0;

            for(BuyProductModel bpa: buyProductArray) {
                row[0] = bpa.productModel.getName();
                row[1] = bpa.categoryModel.getName();
                row[2] = bpa.productModel.getPrice();
                row[3] = bpa.quantity;
                row[4] = bpa.totalPrice;
                totalPrice = Integer.parseInt(bpa.totalPrice) + totalPrice;
                model.addRow(row);
            }
            finalPriceTF.setText(totalPrice+"");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuyList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuyList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuyList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuyList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuyList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyButton;
    private javax.swing.JComboBox<String> categoriesComboBox;
    private javax.swing.JTextField finalPriceTF;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField priceTF;
    private javax.swing.JComboBox<String> productsComboBox;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextField stockTF;
    private javax.swing.JTextField totalPriceTF1;
    // End of variables declaration//GEN-END:variables
}
